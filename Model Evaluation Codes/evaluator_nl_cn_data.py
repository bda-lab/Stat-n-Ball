# -*- coding: utf-8 -*-
"""evaluator_try1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n5UOm6eS30n-7veFnRaPpGmlbjCyXLRv
"""

import sys
test_file = sys.argv[1]
cls_file= sys.argv[2]
#rel_file=sys.argv[3]
dataset_dets=sys.argv[3]
output_file_name=sys.argv[4]

#!unzip nl_27k_prob_jul13.zip

#!unzip cn_15k_prob_jul8.zip

#!ls

#test_file='cn_15k_prob_jul8/test_cn15kprob_may31.txt'

#cls_file='GO_50_0.1_1000_cls_cn15k_prob2_nov29_jul8_not_norm_only_testx3_yoyo.pkl'

#dataset_dets='cn15k'

import pandas as pd

df_cls_cn=pd.read_pickle(cls_file)
#df_rel_cn=

mod3=[]
#with open(r'trans_axiom_cn15k_diffa_c.txt', 'r') as fp:
#with open(r'test_data_cn15k_nosubsep9_ex.txt', 'r') as fp:
#with open(r'cn_15k_prob_jul8/test_cn15kprob_may31.txt', 'r') as fp:
#with open(r'nl_27k_prob_jul13/test_data_nl27kprobjul10.txt', 'r') as fp:
with open(test_file, 'r') as fp:
    for line in fp:
        # remove linebreak from a current name
        # linebreak is the last character of each line

           x = line[:-1]
           #x =x.replace(' ','_')

        # add current item to the list
           mod3.append(x)

mod3[-1]=mod3[-1]

import numpy as np

hv_save_prob=[]
mu_save=[]
mu_bb=[]
c_good=0
c_bad=0

all_test_v=[]
for i in mod3:
      #print(i)
      all_test_v.append(i.split())
#all_test_v[-1]
cac=0

for j in all_test_v:
 try:
  cac+=1
  #if j[2]!='<inverseofdiseasemaybecausedbydrug>' or j[2]!='<ageofperson>' or j[2]!='<fatherofperson>' or j[2]!='<hashusband>' or j[2]!='<hospitalincity>' and j[2]!='<inverseofpoliticianuswenttoschool>' and  j[2]!='<politicianuswenttoschool>' and j[2]!='<citymuseums>':
    ##continue
  #print(j)
  c=np.array(df_cls_cn[df_cls_cn['classes']==j[0]]['embeddings'])[0][:-1]
  d=np.array(df_cls_cn[df_cls_cn['classes']==j[1]]['embeddings'])[0][:-1]
  #rel=np.array(df_rel_cn[df_rel_cn['relations']==j[2]]['embeddings'])[0]
  #c=c+rel

  cr=np.array(df_cls_cn[df_cls_cn['classes']==j[0]]['embeddings'])[0][-1]
  dr=np.array(df_cls_cn[df_cls_cn['classes']==j[1]]['embeddings'])[0][-1]

  if dr>cr and dr>0 and cr>0:
      dist_bada=np.linalg.norm(c-d)
      rad_diff=dr-cr
      rad_sum=dr+cr
      #if rad_sum<=rad_diff:
        #print(rad_sum,rad_diff)
      #if dist_bada<=rad_diff:
      mu_val=dist_bada/rad_diff
      mu_save.append(mu_val)
      #mu_b=rad_sum/rad_diff
      p=float(j[2])
      if dist_bada<=rad_sum and dist_bada>rad_diff:
              mu_b=rad_sum/rad_diff
              #mu_bb.append(mu_b)
              #val_fr_conversion= (mu_val-1)/(mu_b-1)
              val_fr_conversion=1+(((mu_val-1)*(0-1))/(mu_b-1))
              #if mu_val==np.inf or mu_b==np.inf:
                #val_fr_conversion=0.
              #if val_fr_conversion
              mu_bb.append((mu_val,mu_b))
              c_good+=1
      elif dist_bada>rad_sum:
              val_fr_conversion=0.
              c_bad+=1
      elif dist_bada<rad_diff:
              val_fr_conversion=1.
              c_good+=1
  elif dr<=cr and dr>0 and cr>0:
               dist_bada=np.linalg.norm(c-d)
               rad_diff=dr-cr
               rad_sum=dr+cr
               #if rad_sum<=rad_diff:
                      #print(rad_sum,rad_diff)
               #if dist_bada<=rad_diff:
               mu_val=dist_bada/rad_diff
               mu_save.append(mu_val)
               #mu_b=rad_sum/rad_diff
               p=float(j[2])
               if dist_bada<=rad_sum and dist_bada>rad_diff:
                    mu_b=rad_sum/rad_diff
                    #mu_bb.append(mu_b)
                    #val_fr_conversion= (mu_val-1)/(mu_b-1)
                    val_fr_conversion=1+(((mu_val-1)*(0-1))/(mu_b-1))
                    #if mu_val==np.inf or mu_b==np.inf:
                       #val_fr_conversion=0.
                    mu_bb.append((mu_val,mu_b))
                    c_good+=1
               elif dist_bada>rad_sum:
                    val_fr_conversion=0.
                    c_bad+=1
               elif dist_bada<rad_diff:
                    val_fr_conversion=1.
                    c_good+=1

 except:
  pass

#print(c_good,c_bad)
#print(len(all_test_v),cac)
#with open("output_results.txt", "w") as f:
    #f.write('Dataset_details: ',sys.ar)


with open(output_file_name, "w") as f:
    f.writelines([F"Dataset Details: {dataset_dets} \n","=============== \n",F"Good Balls: {c_good}, Valid Balls: {c_bad} \n"])

hv_save_prob=[]
hv_save_prob_case2=[]
mu_save=[]
mu_bb=[]
c_good=0
c_bad=0
hava=[]

case1=0
case2=0
sum_check=0
#df_cls_cn=pd.read_pickle(embed_file)
  #df_cls_cn.head()

all_test_v=[]
for i in mod3:
      all_test_v.append(i.split())
  #all_test_v[-1]
save_inds_true=[]
kk=-1
for j in all_test_v:
     kk+=1
     c=np.array(df_cls_cn[df_cls_cn['classes']==j[0]]['embeddings'])[0][:-1]
     d=np.array(df_cls_cn[df_cls_cn['classes']==j[1]]['embeddings'])[0][:-1]
     #rel=np.array(df_rel_cn[df_rel_cn['relations']==j[2]]['embeddings'])[0]
     #c=c+rel

     #c=c/np.linalg.norm(c)
     #d=d/np.linalg.norm(d)

     cr=np.array(df_cls_cn[df_cls_cn['classes']==j[0]]['embeddings'])[0][-1]
     dr=np.array(df_cls_cn[df_cls_cn['classes']==j[1]]['embeddings'])[0][-1]

     val_fr_conversion=0
     if dr<=cr and dr>0 and cr>0:
      #case1+=1
      """
      if dr>=cr  and dr>0 and cr>0:
      #print((dr,cr))
      dist_bada=np.linalg.norm(c-d)
      rad_diff=dr-cr
      rad_sum=dr+cr
      #if rad_sum<=rad_diff:
        #print(rad_sum,rad_diff)
      #if dist_bada<=rad_diff:
      mu_val=dist_bada/rad_diff
      mu_save.append(mu_val)
      #if dist_bada<=rad_sum and dist_bada>rad_diff:
      if dist_bada<=rad_sum:"""


      reduction_factor=dr/cr
      save_inds_true.append(kk)
      dist_bada=np.linalg.norm(c-d)
      #if dist_bada==np.nan:
        #print('Nan')
      rad_diff=abs(dr-cr)
      rad_sum=dr+cr
      #if rad_sum<=rad_diff:
        #print(rad_sum,rad_diff)
      #if dist_bada<=rad_diff:
      mu_val=dist_bada/rad_diff
      mu_save.append(mu_val)
      #mu_b=rad_sum/rad_diff
      p=float(j[2])
      if dist_bada<=rad_sum and dist_bada>rad_diff:
              sum_check+=1
              mu_b=rad_sum/rad_diff
              #mu_bb.append(mu_b)
              #val_fr_conversion= (mu_val-1)/(mu_b-1)
              val_fr_conversion=(1+(((mu_val-1)*(0-1))/(mu_b-1)))*reduction_factor
              if mu_val==np.inf or mu_b==np.inf:
                val_fr_conversion=0.
              #print(mu_val,mu_b,'MV','MB',rad_diff,cr,dr)
              mu_bb.append((mu_val,mu_b))
              c_good+=1
              hv_save_prob.append([val_fr_conversion,p])
      elif dist_bada>rad_sum:
              sum_check+=1
              val_fr_conversion=0.
              c_bad+=1
              #c_good+=1
              hv_save_prob.append([val_fr_conversion,p])
      elif dist_bada<rad_diff:
              sum_check+=1
              val_fr_conversion=reduction_factor
              c_good+=1
              hv_save_prob.append([val_fr_conversion,p])

      #hv_save_prob_case2.append([val_fr_conversion,p])
     elif dr>cr and dr>0 and cr>0:
      case2+=1
      dist_bada=np.linalg.norm(d-c)
      #if dist_bada==np.nan:
        #print('Nan')
      rad_diff=dr-cr
      rad_sum=dr+cr
      if rad_sum<=rad_diff:
        print(rad_sum,rad_diff)
      #if dist_bada<=rad_diff:
      mu_val=dist_bada/rad_diff
      mu_save.append(mu_val)
      #mu_b=rad_sum/rad_diff
      p=float(j[2])
      if dist_bada<=rad_sum and dist_bada>rad_diff:
              sum_check+=1
              mu_b=rad_sum/rad_diff
              #mu_bb.append(mu_b)
              #val_fr_conversion= (mu_val-1)/(mu_b-1)
              val_fr_conversion=1+(((mu_val-1)*(0-1))/(mu_b-1))
              if mu_val==np.inf or mu_b==np.inf:
                val_fr_conversion=0.
              mu_bb.append((mu_val,mu_b))
              c_good+=1
              hv_save_prob.append([val_fr_conversion,p])
      elif dist_bada>rad_sum:
              sum_check+=1
              val_fr_conversion=0.
              c_bad+=1
              #c_good+=1
              hv_save_prob.append([val_fr_conversion,p])
      elif dist_bada<rad_diff:
              sum_check+=1
              val_fr_conversion=1.
              c_good+=1
              hv_save_prob.append([val_fr_conversion,p])

      #hv_save_prob.append([val_fr_conversion,p])

     else:
      c_bad+=1
      val_fr_conversion=0.
      p=float(j[2])
      hv_save_prob.append([val_fr_conversion,p])

"""
print('case1:',case1,'case2:',case2)
w1=case1/(case1+case2)
w2=case2/(case1+case2)
print('w1:',w1,'w2:',w2)"""


#print('c_good:',c_good,'c_bad:',c_bad)
w1=c_good/(c_good+c_bad)
w2=c_bad/(c_good+c_bad)
#print('w1:',w1,'w2:',w2)
#print('---------')

a1=[]
for i in hv_save_prob:
  #if i[0]!=0:
    #print(i)
    a1.append(i)


a2=[]
for i in hv_save_prob_case2:
  #if i[0]!=0:
    #print(i)
    a2.append(i)

diff=[]
#for i in hv_save_prob:
for i in a1:
  diff.append(abs(i[0]-i[1]))

diff_case2=[]
diff_case3=[]
#for i in hv_save_prob:
for i in a1:
  diff_case2.append(abs(i[0]-i[1]))
  diff_case3.append((i[0]-i[1])**2)

#print('MAE_MAE:',sum(diff_case2)/(c_good+c_bad))
mae=sum(diff_case2)/(c_good+c_bad)

#print('MSE_MSE:', np.sqrt(np.sum(diff_case3)/(c_good+c_bad)))
mse=np.sqrt(np.sum(diff_case3)/(c_good+c_bad))

with open(output_file_name, "a") as f:
    f.write(F"MAE: {mae}, MSE: {mse} \n")

#!unzip ranking_measures-master.zip


#import os
#os.rename('ranking_measures-master','ranking_measures')

#def check_pred_mods(test_data,cls_pkl_file):
import numpy as np
mod3=[]
    #with open(r'cn_15k_prob_jul8/test_cn15kprob_may31.txt') as fp:
    #0.9114644352273611', 'r')  as fp:
with open(test_file, 'r')  as fp:
    #with open(r'HPO_ss_prob/HPO_ss_prob_test.txt', 'r')  as fp:
    #with open(r'trans_axiom_cn15k_diffa_c.txt', 'r') as fp:
      for line in fp:
        # remove linebreak from a current name
        # linebreak is the last character of each line

           x = line[:-1]
           #x =x.replace(' ','_')

        # add current item to the list
           mod3.append(x.split())

    ######################################################

df=pd.DataFrame(mod3,columns=['Entity1','Entity2','Prob_Score'])
df['Prob_Score']=df['Prob_Score'].astype('float64')

df=df[~(df['Entity1'] == df['Entity2'])]

df1=df['Entity2'].value_counts().sort_values(ascending=False).reset_index()

df1.rename(columns={'Entity2':'count'},inplace=True)
df1.rename(columns={'index':'Entity2'},inplace=True)

df2=df1[df1['count']>1]
list_ent2=list(df2['Entity2'].unique())
#list_ent2[:2]

list_ent3=[]

for i in list_ent2:
        max_score=df[df['Entity2']==i]['Prob_Score'].max()
        min_score=df[df['Entity2']==i]['Prob_Score'].min()

        if max_score!=min_score:
           list_ent3.append(i)


df_filt=df[df['Entity2'].isin(list_ent3)]


df_filt_s=df_filt.sort_values(['Entity2','Prob_Score'],ascending=False).groupby('Entity2').head(100)


list_ent33=list(df_filt_s['Entity2'].unique())

list_ranks=[]
for i in list_ent33:
       #print(i)
       rank_this=[]
       df_filt_s2=df_filt_s[df_filt_s['Entity2']==i]
       lista=df_filt_s2['Prob_Score'].tolist()
       listas=list(set(lista))
       #print(listas)
       min_r=1
       max_r=len(listas)
       for i in range(len(df_filt_s2)-1):
         flag1=False
         #print(i,i+1)
         #print(max_r)
         #print(df_filt_s2.iloc[i,-1])
         if df_filt_s2.iloc[i,-1]==df_filt_s2.iloc[i+1,-1]:
             if len(rank_this)==0 and flag1==True:
                 rank_this.append(max_r)
                 max_r-=1
             if len(rank_this)==0 and flag1==False:
                 rank_this.append(max_r)
                 #max_r-=1
             elif len(rank_this)>0 and flag1==False:
                 rank_this.append(max_r)
             elif len(rank_this)>0 :
                 rank_this.append(rank_this[-1])
         else:
                 #print((i,i+1),'yes')
                 rank_this.append(max_r)
                 max_r-=1
                 flag1=True
       if df_filt_s2.iloc[-1,-1]==df_filt_s2.iloc[-2,-1]:
               #print('iii')
               rank_this.append(rank_this[-1])
       else:
               #print('iiii')
               rank_this.append(rank_this[-1]-1)
       list_ranks.extend(rank_this)


       ########################################################3

df_filt_s_c=df_filt_s.copy()
df_filt_s_c['Original_Rank']=list_ranks

       ############################################################

df_cls_cn=pd.read_pickle(cls_file)


       ############################################################

ca=0
probs_to_save=[]
save_nums=[]

for i in range(len(df_filt_s_c)):
            #print(i)
            ca+=1
            c=np.array(df_cls_cn[df_cls_cn['classes']==df_filt_s_c.iloc[i,0]]['embeddings'])[0][:-1]
            d=np.array(df_cls_cn[df_cls_cn['classes']==df_filt_s_c.iloc[i,1]]['embeddings'])[0][:-1]
            #rel=np.array(df_rel_rn[df_rel_rn['relations']=='SubClassOf']['embeddings'])[0][:]
            #   c=c+rel

            cr=np.array(df_cls_cn[df_cls_cn['classes']==df_filt_s_c.iloc[i,0]]['embeddings'])[0][-1]
            dr=np.array(df_cls_cn[df_cls_cn['classes']==df_filt_s_c.iloc[i,1]]['embeddings'])[0][-1]

            val_fr_conversion=0

            if dr<=cr and dr>0 and cr>0:
                #print(i)
                #save_nums.append(i)
                reduction_factor=dr/cr
                #save_inds_true.append(kk)
                dist_bada=np.linalg.norm(c-d)
                rad_diff=abs(dr-cr)
                rad_sum=dr+cr
                #if rad_sum<=rad_diff:
                #print(rad_sum,rad_diff)
                #if dist_bada<=rad_diff:
                #mu_val=dist_bada/rad_diff

                if rad_diff!=0:
                      mu_val=dist_bada/rad_diff
                else:
                      mu_val=0
                      #mu_save.append(mu_val)
                      #mu_b=rad_sum/rad_diff
                      #p=float(j[2])
                if dist_bada<=rad_sum and dist_bada>rad_diff:
                      #sum_check+=1
                      save_nums.append(i)
                      mu_b=rad_sum/rad_diff
                      #mu_bb.append(mu_b)
                      #val_fr_conversion= (mu_val-1)/(mu_b-1)
                      val_fr_conversion=(1+(((mu_val-1)*(0-1))/(mu_b-1)))*reduction_factor
                      if mu_val==np.inf or mu_b==np.inf:
                         val_fr_conversion=0.
                      #mu_bb.append((mu_val,mu_b))
                      #c_good+=1
                      probs_to_save.append(val_fr_conversion)
                elif dist_bada>rad_sum:
                      #sum_check+=1
                      save_nums.append(i)
                      val_fr_conversion=0.
                      #c_bad+=1
                      probs_to_save.append(val_fr_conversion)
                elif dist_bada<rad_diff:
                      #sum_check+=1
                      save_nums.append(i)
                      val_fr_conversion=reduction_factor
                      #c_good+=1
                      probs_to_save.append(reduction_factor)
                else:
                      probs_to_save.append(1.)
             #hv_save_prob_case2.append([val_fr_conversion,p])
            elif dr>cr and dr>0 and cr>0:
                   #print(i)
                    #case2+=1
                     #save_nums.append(i)
                   dist_bada=np.linalg.norm(d-c)
                   rad_diff=dr-cr
                   rad_sum=dr+cr
                   #if rad_sum<=rad_diff:
                       #print(rad_sum,rad_diff)
                   #if dist_bada<=rad_diff:
                   #mu_val=dist_bada/rad_diff

                   if rad_diff!=0:
                          mu_val=dist_bada/rad_diff
                   else:
                          mu_val=0
                   #mu_save.append(mu_val)
                   #mu_b=rad_sum/rad_diff
                   #p=float(j[2])
                   if dist_bada<=rad_sum and dist_bada>rad_diff:
                        #sum_check+=1
                        save_nums.append(i)
                        mu_b=rad_sum/rad_diff
                        #mu_bb.append(mu_b)
                        #val_fr_conversion= (mu_val-1)/(mu_b-1)
                        val_fr_conversion=1+(((mu_val-1)*(0-1))/(mu_b-1))
                        if mu_val==np.inf or mu_b==np.inf:
                            val_fr_conversion=0.
                            #mu_bb.append((mu_val,mu_b))
                            #c_good+=1
                        probs_to_save.append(val_fr_conversion)
                   elif dist_bada>rad_sum:
                        save_nums.append(i)
                         #sum_check+=1
                        val_fr_conversion=0.
                        #c_bad+=1
                        probs_to_save.append(0.)
                   elif dist_bada<rad_diff:
                        #sum_check+=1
                        save_nums.append(i)
                        val_fr_conversion=1.
                        #c_good+=1
                        probs_to_save.append(1.)
                   else:
                        probs_to_save.append(1.)
            else:
                   #print(i)
                   #save_nums.append(i)
                   probs_to_save.append(0.)
                   save_nums.append(i)

    ######################################
a1=[i for i in probs_to_save if i>0]
#return a1


#test_data='nl_27k_prob_jul13/test_data_nl27kprobjul10.txt'
#test_data='cn_15k_prob_jul8/test_cn15kprob_may31.txt'
#cls_pkl_file='cn15k500_50_-0.1.pkl'


#a1_elem_var=check_pred_mods(test_data,cls_pkl_file)
#a2_elem_prob=check_pred_mods(test_data,cls_pkl_file)
#a1_elem_jul8_cn=check_pred_mods(test_data,cls_pkl_file)
#a1_elem_500_cn

#a1_cn_500_elemvar=check_pred_mods(test_data,cls_pkl_file)
#a1_cn_jul8_elemvar=check_pred_mods(test_data,cls_pkl_file)

if len(a1)>=100:
   df_filt_s_c['Prob_Ball']=probs_to_save
   df_filt_s_c2=df_filt_s_c.copy()
   df_filt_s_c3=df_filt_s_c2[['Entity1','Entity2','Prob_Ball']]
   df_filt_s_c4=df_filt_s_c3.sort_values(['Entity2','Prob_Ball'],ascending=False).groupby('Entity2').head(1000)
   list_ent333=list(df_filt_s_c4['Entity2'].unique())


   list_ranks=[]
   for i in list_ent333:
   #print(i)
    rank_this=[]
    df_filt_s2=df_filt_s_c4[df_filt_s_c4['Entity2']==i]
    lista=df_filt_s2['Prob_Ball'].tolist()
    listas=list(set(lista))
    #print(listas)
    min_r=1
    max_r=len(listas)
    for i in range(len(df_filt_s2)-1):
     flag1=False
     #print(i,i+1)
     #print(max_r)
     #print(df_filt_s2.iloc[i,-1])
     if df_filt_s2.iloc[i,-1]==df_filt_s2.iloc[i+1,-1]:
      if len(rank_this)==0 and flag1==True:
        rank_this.append(max_r)
        max_r-=1
      if len(rank_this)==0 and flag1==False:
        rank_this.append(max_r)
        #max_r-=1
      elif len(rank_this)>0 and flag1==False:
        rank_this.append(max_r)
      elif len(rank_this)>0 :
        rank_this.append(rank_this[-1])
     else:
      #print((i,i+1),'yes')
      rank_this.append(max_r)
      max_r-=1
      flag1=True
    if df_filt_s2.iloc[-1,-1]==df_filt_s2.iloc[-2,-1]:
     #print('iii')
      rank_this.append(rank_this[-1])
    else:
      #print('iiii')
      rank_this.append(rank_this[-1]-1)
    list_ranks.extend(rank_this)


   df_filt_s_c4['new_rank']=list_ranks
   mer_final=pd.merge(left=df_filt_s_c2,right=df_filt_s_c4,on=['Entity1','Entity2'],how='inner')
   mer_final.to_csv('mer_final25jun.csv',index=None)
   #import pandas as pd
   dfm=pd.read_csv('mer_final25jun.csv')
   df=dfm.copy()

   unique_entities=list(df['Entity2'].unique())

   def diffr(a,b):
     lista=[]
     for i,j in zip(a,b):
       if i==j:
          lista.append(0)
       else:
          lista.append(1)
     listb=list(range(1, len(lista)+1))
     listb.reverse()
     #print(listb)
     listb2=[iaa/sum(listb) for iaa in listb]
     ws=sum([ia*ja for ia,ja in zip(lista,listb2)])
     return ws

   def ranker(a,b):
    lista=[]
    for i,j in enumerate(zip(a,b)):
     #print('h',i,j[0],j[1])
     if j[0]==j[1]:
         #print('h',j[0].j[1])
         lista.append(0)
     else:
      list_hvv=[]
      for ia in range(0,i):
       #print(ia,'ia')
       if j[0]==b[ia]:
        list_hvv.append(abs(ia-i))
        #print(i,ia,'aaaa')
        break
      for ib in range(i+1,len(b)):
       if j[0]==b[ib]:
         list_hvv.append(abs(ib-i))
         #print(i,ib,'bbbb')
         break
      #print('list_hvv',list_hvv)
      if len(list_hvv)>0:
       min_lista=min(list_hvv)
       lista.append(min_lista)
      else:
       lista.append(1)
     #print('----')

     az=[(1.5)**iw for iw in range(1,len(b)+1)]
     azz=[iww/sum(az) for iww in az]
     azz.reverse()
     listaa=sum([iwww*jwww for iwww,jwww in zip(lista,azz)])
    return [lista,listaa]


   c=0
   ndcg_={}
   rank_ndcg={}
   hdm_res={}
   sums=[]
   from sklearn.metrics import ndcg_score
   from ranking_measures import measures

   #import numpy as np
   for i in unique_entities:
     df_subs=df[df['Entity2']==i]
     a=df_subs['Original_Rank'].tolist()
     b=df_subs['new_rank'].tolist()
     if sum(a)>=sum(b):
      true_relevance=np.asarray([a])
      relevance_score=np.asarray([b])
      ndcg=ndcg_score(true_relevance,relevance_score)
      ndcg_[i]=ndcg
      rank_ndcg[i]=measures.find_rankdcg(a,b)
      c+=1
     else:
      hdm_res[i]=diffr(a,b)
      sums.append(ranker(a,b)[1])

   def hdm(a,b):
     suma=0
     for i,j in enumerate(zip(a,b)):
      if j[0]==j[1]:
        suma+=0
      else:
        #print('A',(len(a)-1)-i)
        suma+=2**((len(a)-1)-i)


     if suma>0:
          sumb=np.log(suma+np.sqrt(float(suma**2-1))+1)
     else:
          sumb=0.0
          #print(suma,sumb)
          #return [suma,sumb]
     return (sumb,len(a))


   #import numpy as np
   hdm_res={}
   for i in unique_entities:
     df_subs=df[df['Entity2']==i]
     a=df_subs['Original_Rank'].tolist()
     b=df_subs['new_rank'].tolist()
     hdm_res[i]=hdm(a,b)



   hdm_lens=[]
   hdm_vals=[]
   for i in hdm_res:
     hdm_lens.append(hdm_res[i][1])
     hdm_vals.append(hdm_res[i][0])


   hdm_vals_mean=np.mean(hdm_vals)
   hdm_vals_med=np.median(hdm_vals)

   ndcg_mean=np.mean(list(ndcg_.values()))
   ndcg_med=np.median(list(ndcg_.values()))

   with open(output_file_name, "a") as f:
    f.write(F"\n HDMA_mean: {hdm_vals_mean}, HDMA_median: {hdm_vals_med},  NDCG_mean: {ndcg_mean}, NDCG_median: {ndcg_med}, total_subconcept_ndcg_applied: {c}, total_multiple_superconcepts: {len(unique_entities)}")


print('DONE!!!!')




